/*
//
Files in specified dir will be loaded recursively (except files in 'lib' dir).

The if the original item definition lacks name, it will be generated by the relative file path:
- extension will be removed
- each token will be converted into lower camel case
- if option.prefix is specified, it will be attached before the name
//

(Options) => ItemDefinition[]

Options ~ {
  dirname: String,
  prefix?: String
}

ItemDefinition ~ see https://github.com/zhaoyao91/the-holder
 */

const path = require('path')
const readdir = require('recursive-readdir-synchronous')
const camelCase = require('lodash.camelcase')

module.exports = function (options) {
  const {dirname, prefix} = options
  return readdir(dirname)
    .filter(file => !file.includes('/lib/'))
    .map(file => {
      const itemDef = require(file)
      if (!itemDef.name) return {
        ...itemDef,
        name: buildItemName(dirname, file, prefix)
      }
      else return itemDef
    })
}

function buildItemName (dirname, filename, prefix = '') {
  const relativeFilename = path.relative(dirname, filename)
  const parsed = path.parse(relativeFilename)
  const tokens = [...parsed.dir.split('/'), parsed.name].filter(x => !!x)
  return prefix + tokens.map(camelCase).join('/')
}